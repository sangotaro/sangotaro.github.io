function init(n){_initialized||(_initialized=!0,_config=n,self.addEventListener("push",function(n){n.waitUntil(handlePush(n))}),self.addEventListener("notificationclick",function(n){n.waitUntil(handleNotificationClick(n).then(sendClientEvent))}))}function handlePush(n){return self.registration.pushManager.getSubscription().then(function(n){var t="https://api.growthpush.com/1/trials?token="+getSubscriptionId(n)+"&applicationId="+_config.applicationId+"&secret="+_config.credentialId;return Promise.resolve(t)}).then(function(n){return self.fetch(n).then(function(n){return 200!==n.status?Promise.reject("Status code isn't 200"):Promise.resolve(n)})}).then(function(n){return n.json().then(function(n){return Promise.resolve(n)})}).then(function(n){var t=null==n.extra?"":"#"+encodeURIComponent(n.extra);return self.registration.showNotification(_config.title,{icon:_config.icon+t,body:n.text,tag:"growthpush-trialId="+n.trialId,vibrate:n.sound?1e3:0})})["catch"](function(n){})}function handleNotificationClick(n){n.notification.close();var t={},e=n.notification.icon.match(/#(.+)/);return null!=e&&e.length>1&&(t=JSON.parse(decodeURIComponent(e[1]))),self.clients.openWindow&&"url"in t?self.clients.openWindow(t.url):self.clients.matchAll({type:"window"}).then(function(n){for(var t=0;t<n.length;t++){var e=n[t];if("/"===e.url&&"focus"in e)return e.focus()}return self.clients.openWindow?self.clients.openWindow("/"):void 0})}function sendClientEvent(){return self.fetch("https://api.growthpush.com/1/events",{method:"post",headers:{"Content-type":"application/x-www-form-urlencoded; charset=UTF-8"},body:"clientId="+_config.clientId+"&code="+_config.code+"&name="+_config.clickEventName}).then(function(n){return 200!==n.status?Promise.reject("Status code isn't 200"):n.json().then(function(n){})})["catch"](function(n){})}function getSubscriptionId(n){return null==n.subscriptionId?n.endpoint.split("/").pop():n.subscriptionId}var _initialized=!1,_config={};self.addEventListener("install",function(n){n.waitUntil(self.skipWaiting())}),self.addEventListener("activate",function(n){n.waitUntil(self.clients.claim())}),self.addEventListener("message",function(n){var t=JSON.parse(n.data);"init"===t.type?(init(t.data),n.ports[0].postMessage({})):n.ports[0].postMessage({error:new Error("Unsupported message type: "+t.type)})});